Theory0:
How to Run Multiple Commands at once in Linux
==============================================

Combining two or more commands on the command line is also known as “command chaining”.

It is used to increase productivity.

Option One: The Semicolon (;) Operator
=======================================

pwd ; ls -l ; whoami

In this case the second command will run regardless of whether the first command is successful or not

You don’t have to put spaces between the semicolons and the commands, either.

Option Two: Logical AND (&&) operator
=======================================

mkdir linux && cd linux

The second command will run only when the first command is successful. Exit status of the first command should be 0.

You can verify the exit status by $?

Option Three: Logical OR (||) operator
=======================================

pwd || ls -l

The second command will run only when the first command is failed

ping -c1 www.google.com > /dev/null || echo “Problem with your network, Please connect to Network Administrator”

Theory1:
The fcntl function can change the properties of a file that is already open.

----
run [ man fcntl ] to find if it is system call
----

#include <fcntl.h>
int fcntl(int fd, int cmd, ... /* int arg */ );

Returns: depends on cmd if OK (see following), −1 on error

The fcntl function is used for five different purposes

	Duplicate an existing descriptor (cmd = F_DUPFD or F_DUPFD_CLOEXEC)
	Get/set file descriptor flags (cmd = F_GETFD or F_SETFD)
	Get/set file status flags (cmd = F_GETFL or F_SETFL)
	Get/set asynchronous I/O ownership (cmd = F_GETOWN or F_SETOWN)
	Get/set record locks (cmd = F_GETLK, F_SETLK, or F_SETLKW)

File status flags
======================

Each open file description has certain associated status flags, initialized by open(2) and possibly modified  by  fcntl()

The file status flags and their semantics are described in open(2)

int open(const char *pathname, int flags); 


F_GETFL (void)
	Get the file access mode and the file status flags; arg is ignored.
$ ./fcntl_getfl 0 < /dev/tty
read only
$ ./fcntl_getfl 1 > temp.foo
$ cat temp.foo
write only
$ ./fcntl_getfl 2 >>temp.foo
write only, append

Theory2:
Set the file status flags to the value specified by arg.

File access mode (O_RDONLY, O_WRONLY, O_RDWR)  and  file  creation flags  (i.e.,  O_CREAT,  O_EXCL, O_NOCTTY, O_TRUNC) in arg are ignored.

On Linux this command can change only the O_APPEND,O_ASYNC, O_DIRECT, O_NOATIME, and O_NONBLOCK flags.

Theory3:
File descriptor flags
===========================

F_GETFD (void)
	Read the file descriptor flags; arg is ignored.

Currently,  only  one  such  flag  is  defined: FD_CLOEXEC,  the  close-on-exec flag.

If the FD_CLOEXEC bit is 0, the file descriptor will remain open across an execve(2), other‐wise it will be closed.

Theory4:
F_SETFD (int)
	Set the file descriptor flags to the value specified by arg.

Theory4:
F_DUPFD
=================

Duplicate the file descriptor fd.

The new file descriptor is returned as the value of the function.

It is the lowest-numbered descriptor that is not already open, and that is greater than or equal to the third argument (taken as an integer).

The new descriptor shares the same file table entry as fd.

The dup() function provides an alternative interface to the service provided by fcntl() using the F_DUPFD command. The call dup(fildes) shall be equivalent to:

fcntl(fildes, F_DUPFD, 0);
