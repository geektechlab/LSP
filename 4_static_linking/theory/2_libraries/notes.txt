Libraries
====================

Functions are blocks of code that are reusable throughout a program.

Using them saves time, removing the need to rewrite code multiple times.

Libraries, like functions also save time in that they make functiones reusable in multiple programs.

A library is exactly like an executable, except instead of running directly, the library functions are invoked with parameters from your executable.

Advantages:
=============

	save much time by reusing work someone else has already done

	it has fewer bugs (since probably many other people use the libraries too, and you benefit from having them finding and fixing bugs).

Linux Library Types:
========================

There are two Linux C/C++ library types which can be created:

	1. Static libraries (.a): Library of object code which is linked with, and becomes part of the application.

	2. Dynamically linked shared object libraries (.so): There is only one form of this library but it can be used in two ways.

		1. Dynamically linked at run time. 
			The libraries must be available during compile/link phase. 
			The shared objects are not included into the executable component but are tied to the execution.
		2. Dynamically loaded/unloaded and linked during execution
			using the dynamic linking loader system functions.

Library naming conventions:
===============================

Libraries are typically named with the prefix "lib".
This is true for all the C standard libraries. 
When linking, the command line reference to the library will not contain the library prefix or suffix.
	eg. gcc src-file.c -lm -lpthread 


How to static link c library
=============================

$ gcc hello.c -o hello --static
$ size ./hello

--------------
$ gcc hello.c -o statichello --static
run [ ldd ./statichello ] and will give you a output that it is not a dynamic executable.
[ size statichello ] will give different section sizes. compared to dynamic library, size is huge.
this means statichello is static library.
[ strace statichello ] will list all system calls made and those are less compared to dynamic library.
--------------
$ gcc hello.c -o dynamichello
run [ ldd dynamichello ] and it will give list of libraries dependent on
[ size dynamichello ] will give different section sizes
this means dynamichello is shared library
[ strace dynamichello ] will list all system calls made and those are large.
--------------
nm lists symbols ( variables and functions ) from object files.
--------------
if we do [ nm -C dynamichello ] then we will get many U, which means undefined untill particular library is loaded.
--------------
whereas, if we do [ nm -C statichello ] then we will get many weak, which means definition of function is present in library.
--------------
