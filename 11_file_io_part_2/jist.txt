Theory0:
#include <fcntl.h>
int creat(const char *path, mode_t mode);

Returns: file descriptor opened for write-only if OK, −1 on error

Note that this function is equivalent to
open(path, O_WRONLY | O_CREAT | O_TRUNC, mode);

Historically, in early versions of the UNIX System, the second argument to open could be only 0, 1, or 2. There was no way to open a file that didn’t already exist. Therefore, a separate system call, creat, was needed to create new files.

With the O_CREAT and O_TRUNC options now provided by open, a separate creat function is no longer needed

One deficiency with creat is that the file is opened only for writing. Before the new version of open was provided, if we were creating a temporary file that we wanted to write and then read back, we had to call creat, close, and then open

A better way is to use the open function, as in
open(path, O_RDWR | O_CREAT | O_TRUNC, mode);

Theory1:
An open file is closed by calling the close function.

#include <unistd.h>
int close(int fd);

Returns: 0 if OK, −1 on error

When a process terminates, all of its open files are closed automatically by the kernel.

-----
if we use buffered I/O then data will get lost if close is not used after opening. Unbuffered I/ it may be okay
-----

Theory2:
Data is written to an open file with the write function.

#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);

Returns: number of bytes written if OK, −1 on error

The return value is usually equal to the nbytes argument; otherwise, an error has occurred.

A common cause for a write error is either filling up a disk or exceeding the file size limit for a given process

For a regular file, the write operation starts at the file’s current offset.

If the O_APPEND option was specified when the file was opened, the file’s offset is set to the current end of file before each write operation.

After a successful write, the file’s offset is incremented by the number of bytes actually written.

Theory3:
Data is read from an open file with the read function.

#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);

Returns: number of bytes read, 0 if end of file, −1 on error

If the read is successful, the number of bytes read is returned. If the end of file is encountered, 0 is returned

When reading from a regular file, if the end of file is reached before the requested number of bytes has been read. 

For example, if 30 bytes remain until the end of file and we try to read 100 bytes, read returns 30. The next time we call read, it will return 0 (end of file).

Theory4:
Every open file has an associated ‘‘current file offset,’’ normally a non-negative integer that measures the number of bytes from the beginning of the file

Read and write operations normally start at the current file offset and cause the offset to be incremented by the number of bytes read or written.

By default, this offset is initialized to 0 when a file is opened, unless the O_APPEND option is specified

An open file’s offset can be set explicitly by calling lseek.

#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);

Returns: new file offset if OK, −1 on error

The interpretation of the offset depends on the value of the whence argument.

If whence is SEEK_SET, the file’s offset is set to offset bytes from the beginning of the file.

If whence is SEEK_CUR, the file’s offset is set to its current value plus the offset. The offset can be positive or negative.

If whence is SEEK_END, the file’s offset is set to the size of the file plus the offset. The offset can be positive or negative.

----
in nutshell,. lseek can be used to play with file's offset
----

Theory5:
why would I need to duplicate a file descriptor?
=================================================

The dup system call duplicates an existing file descriptor, returning a new one that refers to the same underlying I/O object.

Dup allows shells to implement commands like this:

ls existing-file non-existing-file > tmp1  2>&1

The 2>&1 tells the shell to give the command a file descriptor 2 that is a duplicate of descriptor 1. (i.e stderr & stdout point to same fd).

Now the error message for calling ls on non-existing file and the correct output of ls on existing file show up in tmp1 file.

dup and dup2
==================
An existing file descriptor is duplicated by either of the following functions

#include <unistd.h>

int dup(int fd);
int dup2(int fd, int fd2);

Both return: new file descriptor if OK, −1 on error

The new file descriptor returned by dup is guaranteed to be the lowest-numbered available file descriptor.

----
fd doesn't get closed ? verify
----

With dup2, we can specify the value of the new descriptor of our choice with the fd2 argument. If fd2 is already open, it is first closed. If fd equals fd2, then dup2 returns fd2 without closing it.
