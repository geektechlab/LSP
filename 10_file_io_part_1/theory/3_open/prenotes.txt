open
=====================

A file is opened or created by calling either the open function or the openat function

#include <fcntl.h>
int open(const char *path, int oflag, ... /* mode_t mode */ );
int openat(int fd, const char *path, int oflag, ... /* mode_t mode */ );

Both return: file descriptor if OK, −1 on error

We show the last argument as ..., which is the ISO C way to specify that the number and types of the remaining arguments may vary.

the last argument is used only when a new file is being created

The path parameter is the name of the file to open or create.

This function has a multitude of options, which are specified by the oflag argument.

This argument is formed by ORing together one or more of the following constants from the <fcntl.h> header:

	O_RDONLY Open for reading only.
	O_WRONLY Open for writing only.
	O_RDWR Open for reading and writing.

One and only one of the previous three constants must be specified.

The file descriptor returned by open and openat is guaranteed to be the lowest numbered unused descriptor.

One and only one of the previous five constants must be specified

There are other optional constants which can be appended to flags. Below are most important of them.

	O_APPEND Append to the end of file on each write

	O_CREAT Create the file if it doesn’t exist.This option requires a third argument to the open function (a fourth argument to the openat function) — the mode, which specifies the access permission bits of the new file.

	O_EXCL Generate an error if O_CREAT is also specified and the file already exists. This test for whether the file already exists and the creation of the file if it doesn’t exist is an atomic operation.

	O_TRUNC If the file exists and if it is successfully opened for either write-only or read–write, truncate its length to 0.

	O_NONBLOCK this option sets the nonblocking mode for both the opening of the file and subsequent I/O.
