Theory0:
Electric Fence helps you detect two common programming bugs:

	1) software that overruns the boundaries of a malloc()memory allocation,

	2) software that touches a memory allocation that has been released by free().

Electric Fence replaces the C library's normal malloc() function with a version that allocates the requested memory and (usually) allocates a section of memory immediately after this, which the process is not allowed to access! 

Electric Fence creates a virtual fence around each allocated buffer in a way that any illegal memory access results in a segmentation fault. 

Advantage:
============

it doesn't require you to make any changes in the source code of your program.

You just need to link your program with the tool's library during compilation.

makes sure that a segmentation fault is generated on the very first instruction that causes a bounds violation. 

Disadvantage:
===================

Cannot detect memory leaks

As the tool allocates an inaccessible virtual memory page both before and after a user-allocated memory buffer, it ends up consuming a lot of extra memory if your program makes too many dynamic memory allocations.

----
gcc <file name.c> -o <output file> -lefence -g
----
when we execute the binary without linked with electric fence, it didnâ€™t shown any error,

$ gcc 1.c -o 1 
$ ./1

Now, lets link electric fence,

$ gcc 1.c -o 1 -lefence
$ ./1

$ gcc 1.c -o 1 -lefence -g
$ gdb ./1
$ gdb > r

sudo apt-get install electric-fence

Theory1:
printf is buffered I/O.
\n flushes the buffer or we can call fflush(<standard output macro>) to flush I/O.

Theory2:
Library functions vs. System Calls
========================================

Standard functions can be divided in two main categories :-
	1. Library function calls.
	2. System function calls.

The functions which are a part of standard C library are known as Library functions.
E.g. strcmp(), strlen()

The functions which change the execution mode of the program from user mode to kernel mode are known as system calls
E.g. socket(), open(), read() , write()

A library function is linked to the user program and executes in user space but a system call is not linked to a user program and executes in kernel space.

-----
how to find if given given function is library call or system call ?
if we do [ man printf ] and we see 1, it means it is executable.

we can run [ man man ] to find section numbers and what they corresponds to. We can see 2 is for system call and 3 is for library calls.
----
we can check [ man 3 printf ] and it is library call.
----
echo $? to get the return value 

----
running  [ strace ./<executable> ] gives all syscalls used by executable.
----
C Data Types
==============

Common data types used in C:
	char
	int
	float
	double

System Data Types
======================

Historically, certain C data types have been associated with certain UNIX system variables.

	For example, major and minor device numbers have historically been stored in a 16-bit short integer, with 8 bits for the major device number and 8 bits for the minor device number.

	the 32-bit version of Solaris uses 32 bits for the device number: 14 bits for the major and 18 bits for the minor

The header <sys/types.h>  defines some implementation-dependent data types, called the primitive system data types. More of these data types are defined in other headers as well. 

These data types are defined in the headers with the C typedef facility. Most end in _t.

By defining these data types this way, we do not build into our programs implementation details that can change from one system to another

clock_t counter of clock ticks (process time) 
comp_t compressed clock ticks 
dev_t device numbers (major and minor)
fd_set file descriptor sets 
fpos_t file position 
gid_t numeric group IDs
ino_t i-node numbers
mode_t file type, file creation mode 
nlink_t link counts for directory entries 
off_t file sizes and offsets (signed) (lseek)
pid_t process IDs and process group IDs (signed)
pthread_t thread IDs 
ptrdiff_t result of subtracting two pointers (signed)
rlim_t resource limits 
sig_atomic_t data type that can be accessed atomically 
sigset_t signal set 
size_t sizes of objects (such as strings) (unsigned) 
ssize_t functions that return a count of bytes (signed) (read, write)
time_t counter of seconds of calendar time 
uid_t numeric user IDs
wchar_t can represent all distinct character codes

----
generally, anything ending with _t is system data type.
----
