Theory0:
$ !<command> will execute the previous command with all the arguments

$ !vi #will open the last vi command executed

$ sudo !! will execute the previous command with sudo permissions

$ dmesg -c
dmesg: klogctl failed: Operation not permitted

$ sudo !!
sudo dmesg -c
[sudo] password for 

How to Run Multiple Commands at once in Linux
==============================================

Combining two or more commands on the command line is also known as “command chaining”.

It is used to increase productivity.

Option One: The Semicolon (;) Operator
=======================================

pwd ; ls -l ; whoami

In this case the second command will run regardless of whether the first command is successful or not

You don’t have to put spaces between the semicolons and the commands, either.

Option Two: Logical AND (&&) operator
=======================================

mkdir linux && cd linux

The second command will run only when the first command is successful. Exit status of the first command should be 0.

You can verify the exit status by $?

Option Three: Logical OR (||) operator
=======================================

pwd || ls -l

The second command will run only when the first command is failed

ping -c1 www.google.com > /dev/null || echo “Problem with your network, Please connect to Network Administrator”

Theory1:
File Descriptors
====================

A process may have several open files which it may be reading from and writing to.

Each process has its own array to keep track of
	The file opened.
	The files status (whether open for reading or writing: the file status flags )
	The current offset within the file

When a file is opened or created by a process the kernel assigns a position in the above array called the file descriptor.

To the kernel, all open files are referred to by file descriptors.

A file descriptor is a non-negative integer.

When we open an existing file or create a new file, the kernel returns a file descriptor to the process

When we want to read or write a file, we identify the file with the file descriptor that was returned by open or creat as an argument to either read or write.

By convention, UNIX System shells associate 
	file descriptor 0 with the standard input of a process, 
	file descriptor 1 with the standard output, and 
	file descriptor 2 with the standard error.

Although their values are standardized by POSIX.1

the magic numbers 0, 1, and 2 should be replaced in POSIX-compliant applications with the symbolic constants
STDIN_FILENO, STDOUT_FILENO, and STDERR_FILENO to improve readability. We should use symbolic constants only.

These constants are defined in the <unistd.h> header.

stdout vs stderr
======================

stdout is fully buffered and stderr is not buffered. 

This means when we write to stdout, it goes to a buffer and when we command it to display on the console, it displays it. 

For example, whenever we write system call encounters '\n' character it flushes the buffer on the console, the other way is to call 'fflush(stdout)'.

Whereas with stderr, it will be directly flushed to console, there is no buffer in between.

stdout should be used for regular messages and stderr should be used for error(diagnostic) messages.

When you redirect the output of command using redirection operator, it only redirects stdout messages

command > logfile

It is similar to

command 1> logfile

If you want to redirect stderr messages to logfile. Note: There should not be any space before redirection operator

command 2> logfile

If you want to redirect both stdout and stderr to different files

command 1> outfile 2> errfile

To redirect both stdout and stderr to a single file

command > outfile 2>&1

Theory2:
fopen vs open in C
==================

1) fopen is a library function while open is a system call.

2) fopen provides buffered IO which is faster compare to open which is non buffered.

3) fopen is portable while open not portable (because open is environment ( platform - linux/windows etc. ) specific).

4) fopen returns a pointer to a FILE structure(FILE *); open returns an integer that identifies the file.

5) A FILE * gives you the ability to use fscanf and other stdio functions.
open
=====================

A file is opened or created by calling either the open function or the openat function

#include <fcntl.h>
int open(const char *path, int oflag, ... /* mode_t mode */ );
int openat(int fd, const char *path, int oflag, ... /* mode_t mode */ );

Both return: file descriptor if OK, −1 on error

We show the last argument as ..., which is the ISO C way to specify that the number and types of the remaining arguments may vary.

the last argument is used only when a new file is being created

The path parameter is the name of the file to open or create.

This function has a multitude of options, which are specified by the oflag argument.

This argument is formed by ORing together one or more of the following constants from the <fcntl.h> header:

	O_RDONLY Open for reading only.
	O_WRONLY Open for writing only.
	O_RDWR Open for reading and writing.

One and only one of the previous three constants must be specified.

The file descriptor returned by open and openat is guaranteed to be the lowest numbered unused descriptor.

One and only one of the previous five constants must be specified

There are other optional constants which can be appended to flags. Below are most important of them.

	O_APPEND Append to the end of file on each write

	O_CREAT Create the file if it doesn’t exist.This option requires a third argument to the open function (a fourth argument to the openat function) — the mode, which specifies the access permission bits of the new file.

	O_EXCL Generate an error if O_CREAT is also specified and the file already exists. This test for whether the file already exists and the creation of the file if it doesn’t exist is an atomic operation.

	O_TRUNC If the file exists and if it is successfully opened for either write-only or read–write, truncate its length to 0.

	O_NONBLOCK this option sets the nonblocking mode for both the opening of the file and subsequent I/O.

Theory3:
Absolute Path vs Relative Path
=======================================

An absolute path is defined as specifying the location of a file or directory from the root directory(/). In other words we can say absolute path is a complete path from start of actual filesystem from / directory

example:
/home/user/Document/srv.txt
/root/data/dev.jpg
/var/log/messages

Relative path is defined as path related to the present working directory(pwd). Suppose I am located in /home/user1 and I want to change directory to /home/user1/Documents. I can use relative path concept to change directory to Documents.

$ pwd
/home/user1
$cd Documents/  (using relative path)
$pwd
/home/user1/Documents

or

$ pwd
/home/user1
$cd /home/user1/Documents/  (using absolute path)
$ pwd
/home/user1/Documents  

openat
================

#include <fcntl.h>
int open(const char *path, int oflag, ... /* mode_t mode */ );
int openat(int fd, const char *path, int oflag, ... /* mode_t mode */ );

The fd parameter distinguishes the openat function from the open function.

There are three possibilities:
	1. The path parameter specifies an absolute pathname. In this case, the fd parameter is ignored and the openat function behaves like the open function.
	2. The path parameter specifies a relative pathname and the fd parameter is a file descriptor that specifies the starting location in the file system where the relative pathname is to be evaluated
	3. The path parameter specifies a relative pathname and the fd parameter has the special value AT_FDCWD. In this case, the pathname is evaluated starting in the current working directory and the openat function behaves like the open function.

------
diff btween open and openat is openat takes file descriptor/at cwd.
------
