Mutex
============

We can protect our data and ensure access by only one thread at a time by using the pthreads mutual-exclusion interfaces

A mutex is basically a lock that we set (lock) before accessing a shared resource and release (unlock) when we’re done.

While it is set, any other thread that tries to set it will block until we release it.

If more than one thread is blocked when we unlock the mutex, then all threads blocked on the lock will be made runnable, and the first one to run will be able to set the lock.

A mutex variable is represented by the pthread_mutex_t data type.

Before we can use a mutex variable, we must first initialize it by either setting it to the constant PTHREAD_MUTEX_INITIALIZER (for statically allocated mutexes only) or calling pthread_mutex_init.

If we allocate the mutex dynamically (by calling malloc, for example), then we need to call pthread_mutex_destroy before freeing the memory.

#include <pthread.h>
int pthread_mutex_init(pthread_mutex_t *restrict mutex,
const pthread_mutexattr_t *restrict attr);
int pthread_mutex_destroy(pthread_mutex_t *mutex);

To initialize a mutex with the default attributes, we set attr to NULL.

To lock a mutex, we call pthread_mutex_lock.

If the mutex is already locked, the calling thread will block until the mutex is unlocked.

To unlock a mutex, we call pthread_mutex_unlock.

#include <pthread.h>
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);

If a thread can’t afford to block, it can use pthread_mutex_trylock to lock the mutex conditionally

If the mutex is unlocked at the time pthread_mutex_trylock is called, then pthread_mutex_trylock will lock the mutex without blocking and return 0.

Otherwise, pthread_mutex_trylock will fail, returning EBUSY without locking the mutex.

-------
we can find more details about mutex at [ vi /usr/include/pthread.h
-------
