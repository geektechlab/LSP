What is the Reader Writer Problem?
==================================

There is a shared resource which should be accessed by multiple processes. 

There are two types of processes in this context. They are reader and writer.

Any number of readers can read from the shared resource simultaneously, but only one writer can write to the shared resource.

When a writer is writing data to the resource, no other process can access the resource

A writer cannot write to the resource if there are non zero number of readers accessing the resource at that time.

read() {
  lock(&m)
  // do read stuff
  unlock(&m)
}

write() {
  lock(&m)
  // do write stuff
  unlock(&m)
}

At least our first attempt does not suffer from data corruption (readers must wait while a writer is writing and vice versa)! 

However, readers must also wait for other readers.

Reader-Writer Locks
===================

Reader–writer locks are similar to mutexes, except that they allow for higher degrees of parallelism.

With a mutex, the state is either locked or unlocked, and only one thread can lock it at a time.

Three states are possible with a reader–writer lock: 
	locked in read mode, 
	locked in write mode, and 
	unlocked.

Only one thread at a time can hold a reader–writer lock in write mode, but multiple threads can hold a reader–writer lock in read mode at the same time

When a reader–writer lock is write locked, all threads attempting to lock it block until it is unlocked.

When a reader–writer lock is read locked, all threads attempting to lock it in read mode are given access, but any threads attempting to lock it in write mode block until all the threads have released their read locks

Reader–writer locks are well suited for situations in which data structures are read more often than they are modified

Reader–writer locks are also called shared–exclusive locks. When a reader–writer lock is read locked, it is said to be locked in shared mode. When it is write locked, it is said to be locked in exclusive mode.

As with mutexes, reader–writer locks must be initialized before use and destroyed before freeing their underlying memory.

#include <pthread.h>
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,
const pthread_rwlockattr_t *restrict attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
Both return: 0 if OK, error number on failure

A reader–writer lock is initialized by calling pthread_rwlock_init. We can pass a null pointer for attr if we want the reader–writer lock to have the default attributes

Before freeing the memory backing a reader–writer lock, we need to call pthread_rwlock_destroy to clean it up.

To lock a reader–writer lock in read mode, we call pthread_rwlock_rdlock. To  write lock a reader–writer lock, we call pthread_rwlock_wrlock. Regardless of how we lock a reader–writer lock, we can unlock it by calling pthread_rwlock_unlock.

#include <pthread.h>
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
