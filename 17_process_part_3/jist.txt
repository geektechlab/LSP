Theory0:
After a successful fork, execution in both the parent and child process continues at the instruction following the fork.

Why does this happen?

the job of fork is to make a (pretty much) identical copy of the parent in the child; this includes the hardware context (mentioned earlier), which of course includes the Instruction Pointer (IP) register (sometimes called the Program Counter (PC)) itself! Hence, the child process too will execute the user mode code at the same location as the parent.

The printf line is executed only once however notice that the printed contents is not flushed to standard out 

The output text is therefore still in process memory waiting to be sent. When fork() is executed the entire process memory is duplicated including the buffer. Thus the child process starts with a non-empty output buffer which will be flushed when the program exits.

System administrators don't like fork-bombs and may set upper limits on the number of processes each user can have or may revoke login rights because it creates a disturbance in the force for other users' programs

You can also limit the number of child processes created by using setrlimit().

An existing process can create a new one by calling the fork function

#include <unistd.h>
pid_t fork(void);

Returns: 0 in child, process ID of child in parent, −1 on error

The new process created by fork is called the child process. and already existing process is called parent process.

This function is called once but returns twice

The only difference in the returns is that the return value in the child is 0, whereas the return value in the parent is the process ID of the new child

The reason the child’s process ID is returned to the parent is that a process can have more than one child, and there is no function that allows a process to obtain the process IDs of its children.

The reason fork returns 0 to the child is that a process can have only a single parent, and the child can always call getppid to obtain the process ID of its parent.

(Process ID 0 is reserved for use by the kernel, so it’s not possible for 0 to be the process ID of a child.)

What does fork do?
=====================

The fork system call clones the current process to create a new process.

It creates a new process (the child process) by duplicating the state of the existing process with a few minor differences 

Thus, when a child process is created, the OS will copy the parent's 
	text, 
	data (three of them), 
	library (and other mappings), plus 
	the stack segment to the child.

Hang on though; it does not stop there: There is more, much more, to a process than just its VAS.

Open files 
Process credentials 
Scheduling information 
Filesystem (VFS) structures 
Paging tables 
Namespaces 
Signal dispositions 
Resource limits 
IPC structures 
Profiling (perf) information 
Security information:
Thread stacks and TLS 
Hardware context

The following attributes of the parent process are not inherited by the child process upon forking: 
PID, 
PPID 
Locks 
Pending and blocked signals (cleared for child) 
Timers, 
alarms (cleared for child) 
Audit information (CPU/time counters are reset for child) 
Semaphore adjustments made via semop(2) 
Asynchronous IO (AIO) ops and contexts

Note:
==========
The child process does not start from main. Instead it returns from fork() just as the parent process does.

Theory1:
In older UNIX systems, the entire address space of the parent process was directly copied (regardless of whether the resource was modified or not).

These days, kernel performs copy-on-write, which saves a lot of resources, while being very time efficient.

Copy on Write
====================

Modern implementations don’t perform a complete copy of the parent’s data, stack, and heap, since a fork is often followed by an exec.

Instead, a technique called copy-on-write (COW) is used.

These regions are shared by the parent and the child and have their protection changed by the kernel to read-only.

If either process tries to modify these regions, the kernel then makes a copy of that piece of memory only, typically a ‘‘page’’ in a virtual memory system.

Theory2:
In general, we never know whether the child starts executing before the parent, or vice versa. The order depends on the scheduling algorithm used by the kernel.

If it’s required that the child and parent synchronize their actions, some form of interprocess communication is required.

When a process terminates, either normally or abnormally, the kernel notifies the parent by sending the SIGCHLD signal to the parent.

Because the termination of a child is an  asynchronous event—it can happen at any time while the parent is running — this signal is the asynchronous notification from the kernel to the parent

The parent can choose to ignore this signal, or it can provide a function that is called when the signal occurs: a signal handler. The default action for this signal is to be ignored.

#include <sys/wait.h>
pid_t wait(int *statloc);
pid_t waitpid(pid_t pid, int *statloc, int options);

a process that calls wait or waitpid can

	Block, if all of its children are still running

	Return immediately with the termination status of a child, if a child has terminated and is waiting for its termination status to be fetched

	Return immediately with an error, if it doesn’t have any child processes

The differences between these two functions are as follows:

	The wait function can block the caller until a child process terminates, whereas waitpid has an option that prevents it from blocking

	If the caller blocks and has multiple children, wait returns when one terminates. We can always tell which child terminated, because the process ID is returned by the function.

Why should we use WIFEXITED?
==============================

wait returning >= 0 tells you a child process has terminated (and that calling wait didn't fail), but it does not tell you whether that process terminated successfully or not (or if it was signalled).

WIFEXITED(status): did the process exit normally? (as opposed to being signalled).

WEXITSTATUS(status) == 0: did the process exit with exit code 0 

Theory3:
The parent is notified via a signal, SIGCHLD, when the child process finishes but not vice versa.

Theory4:
Do child processes share open filehandles?
=============================================

Yes! In fact both processes use the same underlying kernel file descriptor. For example if one process rewinds the random access position back to the beginning of the file, then both processes are affected.

Both child and parent should close (or fclose) their file descriptors or file handle respectively.

Theory5:
Zombies
==================

When a child finishes (or terminates) it still takes up a slot in the kernel process table. 

Furthermore, they still contain information about the process that got terminated, such as process id, exit status, etc. (i.e. a skeleton of the original process still remains)

Only when the child has been 'waited on' will the slot be available and the remaining information can be accessed by the parent.

A long running program could create many zombies by continually creating processes and never wait-ing for them.


What would be effect of too many zombies?
===========================================

Eventually there would be insufficient space in the kernel process table to create a new processes. 

Thus fork() would fail and could make the system difficult / impossible to use - for example just logging in requires a new process!

Theory6:
system:
------
syntax:
int system(const char* cmd);

system() is used to invoke an o.s cmd from c/c++ program.

Using system(), we can execute any command that can be run on the terminal.

Return value:
-1  : Error
On success, the return value is the return status of the command as provided by wait(). 
Consequently, the exit code of the executed command is obtained via WEXITSTATUS.

The system call will fork, execute the command passed by parameter and the original parent process will wait for this to finish. This also means that system is a blocking call: The parent process can't continue until the process started by system exits. This may or may not be useful.
